// Datasource
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Generator
generator client {
  provider = "prisma-client-js"
}

model TestingItem {
  id          String   @id @default(uuid())
  name        String
  description String?
  status      Status   @default(todo)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  ownerId     String?
  owner       User?    @relation(fields: [ownerId], references: [id], onDelete: Cascade)
}

enum Status {
  todo
  in_progress
  done
}

model User {
  id        String        @id
  email     String        @unique
  name      String?
  password  String?       // For email/password auth
  githubId  String?       @unique // For GitHub OAuth
  createdAt DateTime      @default(now())
  items     TestingItem[]
  albums    Album[]       // User's albums
  
  @@index([githubId])
}

model Category {
  id          String       @id @default(uuid())
  name        String       @unique
  description String?
  color       String?      // Hex color for UI display
  subcategories Subcategory[]
  albums      Album[]      // Add albums relationship
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Subcategory {
  id          String     @id @default(uuid())
  name        String
  description String?
  categoryId  String
  category    Category   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  albums      Album[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@unique([name, categoryId])
  @@index([categoryId])
}

model Label {
  id          String     @id @default(uuid())
  name        String
  color       String?    
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@unique([name]) 
}

model AlbumLabel {
  id          String     @id @default(uuid())
  labelId        String
  albumId        String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@unique([labelId,albumId]) 
}

model Group {
  id          String     @id @default(uuid())
  name        String
  description String?
  color       String?    // Hex color for UI display
  ownerId     String
  albums      Album[]    // Add albums relationship
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@unique([name, ownerId]) // Allow same name for different owners
  @@index([ownerId])
}

model Album {
  id          String     @id @default(uuid())
  name        String
  description String?
  color       String?    // Hex color for UI display
  ownerId     String
  owner       User       @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  groupId     String?    // Optional group association
  group       Group?     @relation(fields: [groupId], references: [id])
  categoryId  String?    // Optional category association
  category    Category?  @relation(fields: [categoryId], references: [id])
  subcategoryId String?  // Optional subcategory association (must belong to category)
  subcategory   Subcategory? @relation(fields: [subcategoryId], references: [id])
  audioFiles  AudioFile[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@unique([name, ownerId]) // Allow same name for different owners
  @@index([ownerId])
  @@index([groupId])
  @@index([categoryId])
  @@index([subcategoryId])
}

model AudioFile {
  id            String      @id @default(uuid())
  title         String
  originalName  String
  blobUrl       String      @unique
  blobId        String      @unique
  format        String
  duration      Int?        // in seconds
  fileSize      Int         // in bytes
  status        AudioStatus @default(draft)
  language      String?     // Language of the audio content
  description  String?     // Description of the audio content
  originalWebsite String?   // Original website where audio was found (optional)
  ownerId       String
  albumId       String?     // Add album relationship
  album         Album?      @relation(fields: [albumId], references: [id], onDelete: SetNull)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([status, createdAt])
  @@index([ownerId])
  @@index([albumId])
}

enum AudioStatus {
  draft
  published
}


